-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from parser.y
-----------------------------------------------------------------------------

state 3 contains 1 shift/reduce conflicts.
state 31 contains 1 shift/reduce conflicts.
state 54 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Sequence                            (0)
	Sequence -> Exp Sequence                           (1)
	Sequence ->                                        (2)
	Exp -> Literal                                     (3)
	Exp -> LetExp                                      (4)
	Exp -> CaseExp                                     (5)
	Literal -> Literal '+' Literal                     (6)
	Literal -> Literal '-' Literal                     (7)
	Literal -> Literal '*' Literal                     (8)
	Literal -> Literal '=' Literal                     (9)
	Literal -> '-' Literal                             (10)
	Literal -> '(' Literal ')'                         (11)
	Literal -> num                                     (12)
	Literal -> var                                     (13)
	LetExp -> '(' let '(' Declaration ')' '(' Exp ')' ')'   (14)
	CaseExp -> '(' case '(' Exp ')' CaseBody ')'       (15)
	CaseExp -> '(' case '(' Exp ')' CaseBody ElseBody ')'   (16)
	Declaration -> '(' var Exp ')' Declaration         (17)
	Declaration ->                                     (18)
	CaseBody -> '(' '(' Literal ')' Exp ')' CaseBody   (19)
	CaseBody ->                                        (20)
	ElseBody -> '(' else Exp ')'                       (21)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TokenEq }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'('            { TokenOpenRound }
	')'            { TokenClosedRound }
	num            { TokenNum $$ }
	var            { TokenVar $$ }
	let            { TokenLet }
	case           { TokenCase }
	else           { TokenElse }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Sequence        rules 1, 2
	Exp             rules 3, 4, 5
	Literal         rules 6, 7, 8, 9, 10, 11, 12, 13
	LetExp          rule  14
	CaseExp         rules 15, 16
	Declaration     rules 17, 18
	CaseBody        rules 19, 20
	ElseBody        rule  21

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9
	%eof           reduce using rule 2

	Sequence       goto state 10
	Exp            goto state 2
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 1


	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 2
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 2

	Sequence -> Exp . Sequence                          (rule 1)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9
	%eof           reduce using rule 2

	Sequence       goto state 20
	Exp            goto state 2
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 3

	Exp -> Literal .                                    (rule 3)
	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)

	'='            shift, and enter state 16
	'+'            shift, and enter state 17
	'-'            shift, and enter state 18
			(reduce using rule 3)

	'*'            shift, and enter state 19
	'('            reduce using rule 3
	')'            reduce using rule 3
	num            reduce using rule 3
	var            reduce using rule 3
	%eof           reduce using rule 3


State 4

	Exp -> LetExp .                                     (rule 4)

	'-'            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	num            reduce using rule 4
	var            reduce using rule 4
	%eof           reduce using rule 4


State 5

	Exp -> CaseExp .                                    (rule 5)

	'-'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	num            reduce using rule 5
	var            reduce using rule 5
	%eof           reduce using rule 5


State 6

	Literal -> '-' . Literal                            (rule 10)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 15

State 7

	Literal -> '(' . Literal ')'                        (rule 11)
	LetExp -> '(' . let '(' Declaration ')' '(' Exp ')' ')'    (rule 14)
	CaseExp -> '(' . case '(' Exp ')' CaseBody ')'      (rule 15)
	CaseExp -> '(' . case '(' Exp ')' CaseBody ElseBody ')'    (rule 16)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9
	let            shift, and enter state 13
	case           shift, and enter state 14

	Literal        goto state 11

State 8

	Literal -> num .                                    (rule 12)

	'='            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	num            reduce using rule 12
	var            reduce using rule 12
	%eof           reduce using rule 12


State 9

	Literal -> var .                                    (rule 13)

	'='            reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	num            reduce using rule 13
	var            reduce using rule 13
	%eof           reduce using rule 13


State 10

	%start_calc -> Sequence .                           (rule 0)

	%eof           accept


State 11

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)
	Literal -> '(' Literal . ')'                        (rule 11)

	'='            shift, and enter state 16
	'+'            shift, and enter state 17
	'-'            shift, and enter state 18
	'*'            shift, and enter state 19
	')'            shift, and enter state 27


State 12

	Literal -> '(' . Literal ')'                        (rule 11)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 11

State 13

	LetExp -> '(' let . '(' Declaration ')' '(' Exp ')' ')'    (rule 14)

	'('            shift, and enter state 26


State 14

	CaseExp -> '(' case . '(' Exp ')' CaseBody ')'      (rule 15)
	CaseExp -> '(' case . '(' Exp ')' CaseBody ElseBody ')'    (rule 16)

	'('            shift, and enter state 25


State 15

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)
	Literal -> '-' Literal .                            (rule 10)

	'='            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	num            reduce using rule 10
	var            reduce using rule 10
	%eof           reduce using rule 10


State 16

	Literal -> Literal '=' . Literal                    (rule 9)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 24

State 17

	Literal -> Literal '+' . Literal                    (rule 6)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 23

State 18

	Literal -> Literal '-' . Literal                    (rule 7)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 22

State 19

	Literal -> Literal '*' . Literal                    (rule 8)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 21

State 20

	Sequence -> Exp Sequence .                          (rule 1)

	%eof           reduce using rule 1


State 21

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal '*' Literal .                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)

	'='            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	num            reduce using rule 8
	var            reduce using rule 8
	%eof           reduce using rule 8


State 22

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal '-' Literal .                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)

	'='            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            shift, and enter state 19
	'('            reduce using rule 7
	')'            reduce using rule 7
	num            reduce using rule 7
	var            reduce using rule 7
	%eof           reduce using rule 7


State 23

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal '+' Literal .                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)

	'='            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 19
	'('            reduce using rule 6
	')'            reduce using rule 6
	num            reduce using rule 6
	var            reduce using rule 6
	%eof           reduce using rule 6


State 24

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)
	Literal -> Literal '=' Literal .                    (rule 9)

	'='            reduce using rule 9
	'+'            shift, and enter state 17
	'-'            shift, and enter state 18
	'*'            shift, and enter state 19
	'('            reduce using rule 9
	')'            reduce using rule 9
	num            reduce using rule 9
	var            reduce using rule 9
	%eof           reduce using rule 9


State 25

	CaseExp -> '(' case '(' . Exp ')' CaseBody ')'      (rule 15)
	CaseExp -> '(' case '(' . Exp ')' CaseBody ElseBody ')'    (rule 16)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 30
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 26

	LetExp -> '(' let '(' . Declaration ')' '(' Exp ')' ')'    (rule 14)

	'('            shift, and enter state 29
	')'            reduce using rule 18

	Declaration    goto state 28

State 27

	Literal -> '(' Literal ')' .                        (rule 11)

	'='            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	num            reduce using rule 11
	var            reduce using rule 11
	%eof           reduce using rule 11


State 28

	LetExp -> '(' let '(' Declaration . ')' '(' Exp ')' ')'    (rule 14)

	')'            shift, and enter state 33


State 29

	Declaration -> '(' . var Exp ')' Declaration        (rule 17)

	var            shift, and enter state 32


State 30

	CaseExp -> '(' case '(' Exp . ')' CaseBody ')'      (rule 15)
	CaseExp -> '(' case '(' Exp . ')' CaseBody ElseBody ')'    (rule 16)

	')'            shift, and enter state 31


State 31

	CaseExp -> '(' case '(' Exp ')' . CaseBody ')'      (rule 15)
	CaseExp -> '(' case '(' Exp ')' . CaseBody ElseBody ')'    (rule 16)

	'('            shift, and enter state 37
			(reduce using rule 20)

	')'            reduce using rule 20

	CaseBody       goto state 36

State 32

	Declaration -> '(' var . Exp ')' Declaration        (rule 17)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 35
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 33

	LetExp -> '(' let '(' Declaration ')' . '(' Exp ')' ')'    (rule 14)

	'('            shift, and enter state 34


State 34

	LetExp -> '(' let '(' Declaration ')' '(' . Exp ')' ')'    (rule 14)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 43
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 35

	Declaration -> '(' var Exp . ')' Declaration        (rule 17)

	')'            shift, and enter state 42


State 36

	CaseExp -> '(' case '(' Exp ')' CaseBody . ')'      (rule 15)
	CaseExp -> '(' case '(' Exp ')' CaseBody . ElseBody ')'    (rule 16)

	'('            shift, and enter state 40
	')'            shift, and enter state 41

	ElseBody       goto state 39

State 37

	CaseBody -> '(' . '(' Literal ')' Exp ')' CaseBody    (rule 19)

	'('            shift, and enter state 38


State 38

	CaseBody -> '(' '(' . Literal ')' Exp ')' CaseBody    (rule 19)

	'-'            shift, and enter state 6
	'('            shift, and enter state 12
	num            shift, and enter state 8
	var            shift, and enter state 9

	Literal        goto state 48

State 39

	CaseExp -> '(' case '(' Exp ')' CaseBody ElseBody . ')'    (rule 16)

	')'            shift, and enter state 47


State 40

	ElseBody -> '(' . else Exp ')'                      (rule 21)

	else           shift, and enter state 46


State 41

	CaseExp -> '(' case '(' Exp ')' CaseBody ')' .      (rule 15)

	'-'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	num            reduce using rule 15
	var            reduce using rule 15
	%eof           reduce using rule 15


State 42

	Declaration -> '(' var Exp ')' . Declaration        (rule 17)

	'('            shift, and enter state 29
	')'            reduce using rule 18

	Declaration    goto state 45

State 43

	LetExp -> '(' let '(' Declaration ')' '(' Exp . ')' ')'    (rule 14)

	')'            shift, and enter state 44


State 44

	LetExp -> '(' let '(' Declaration ')' '(' Exp ')' . ')'    (rule 14)

	')'            shift, and enter state 51


State 45

	Declaration -> '(' var Exp ')' Declaration .        (rule 17)

	')'            reduce using rule 17


State 46

	ElseBody -> '(' else . Exp ')'                      (rule 21)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 50
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 47

	CaseExp -> '(' case '(' Exp ')' CaseBody ElseBody ')' .    (rule 16)

	'-'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	num            reduce using rule 16
	var            reduce using rule 16
	%eof           reduce using rule 16


State 48

	Literal -> Literal . '+' Literal                    (rule 6)
	Literal -> Literal . '-' Literal                    (rule 7)
	Literal -> Literal . '*' Literal                    (rule 8)
	Literal -> Literal . '=' Literal                    (rule 9)
	CaseBody -> '(' '(' Literal . ')' Exp ')' CaseBody    (rule 19)

	'='            shift, and enter state 16
	'+'            shift, and enter state 17
	'-'            shift, and enter state 18
	'*'            shift, and enter state 19
	')'            shift, and enter state 49


State 49

	CaseBody -> '(' '(' Literal ')' . Exp ')' CaseBody    (rule 19)

	'-'            shift, and enter state 6
	'('            shift, and enter state 7
	num            shift, and enter state 8
	var            shift, and enter state 9

	Exp            goto state 53
	Literal        goto state 3
	LetExp         goto state 4
	CaseExp        goto state 5

State 50

	ElseBody -> '(' else Exp . ')'                      (rule 21)

	')'            shift, and enter state 52


State 51

	LetExp -> '(' let '(' Declaration ')' '(' Exp ')' ')' .    (rule 14)

	'-'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	num            reduce using rule 14
	var            reduce using rule 14
	%eof           reduce using rule 14


State 52

	ElseBody -> '(' else Exp ')' .                      (rule 21)

	')'            reduce using rule 21


State 53

	CaseBody -> '(' '(' Literal ')' Exp . ')' CaseBody    (rule 19)

	')'            shift, and enter state 54


State 54

	CaseBody -> '(' '(' Literal ')' Exp ')' . CaseBody    (rule 19)

	'('            shift, and enter state 37
			(reduce using rule 20)

	')'            reduce using rule 20

	CaseBody       goto state 55

State 55

	CaseBody -> '(' '(' Literal ')' Exp ')' CaseBody .    (rule 19)

	'('            reduce using rule 19
	')'            reduce using rule 19


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 22
Number of terminals: 11
Number of non-terminals: 9
Number of states: 56
