-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.12 from parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_calc -> Seq                                 (0)
	Seq -> Seq '(' Exp ')'                             (1)
	Seq ->                                             (2)
	Exp -> let '(' Declaration ')' '(' Exp ')'         (3)
	Exp -> case '(' Exp ')' ThenBody                   (4)
	Exp -> '+' Exp Exp                                 (5)
	Exp -> '-' Exp Exp                                 (6)
	Exp -> '*' Exp Exp                                 (7)
	Exp -> '=' Exp Exp                                 (8)
	Exp -> '(' Exp ')'                                 (9)
	Exp -> num                                         (10)
	Exp -> var                                         (11)
	Declaration -> Declaration '[' var '(' Exp ')' ']'   (12)
	Declaration ->                                     (13)
	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']'   (14)
	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' ThenBody   (15)
	ThenBody ->                                        (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'='            { TokenEq }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'('            { TokenOpenRound }
	')'            { TokenClosedRound }
	'['            { TokenOpenBox }
	']'            { TokenClosedBox }
	num            { TokenNum $$ }
	var            { TokenVar $$ }
	let            { TokenLet }
	case           { TokenCase }
	else           { TokenElse }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_calc     rule  0
	Seq             rules 1, 2
	Exp             rules 3, 4, 5, 6, 7, 8, 9, 10, 11
	Declaration     rules 12, 13
	ThenBody        rules 14, 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'('            reduce using rule 2
	%eof           reduce using rule 2

	Seq            goto state 3

State 1



	Seq            goto state 2

State 2

	Seq -> Seq . '(' Exp ')'                            (rule 1)

	'('            shift, and enter state 4


State 3

	%start_calc -> Seq .                                (rule 0)
	Seq -> Seq . '(' Exp ')'                            (rule 1)

	'('            shift, and enter state 4
	%eof           accept


State 4

	Seq -> Seq '(' . Exp ')'                            (rule 1)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 5

State 5

	Seq -> Seq '(' Exp . ')'                            (rule 1)

	')'            shift, and enter state 22


State 6

	Exp -> '=' . Exp Exp                                (rule 8)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 21

State 7

	Exp -> '+' . Exp Exp                                (rule 5)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 20

State 8

	Exp -> '-' . Exp Exp                                (rule 6)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 19

State 9

	Exp -> '*' . Exp Exp                                (rule 7)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 18

State 10

	Exp -> '(' . Exp ')'                                (rule 9)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 17

State 11

	Exp -> num .                                        (rule 10)

	'='            reduce using rule 10
	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	num            reduce using rule 10
	var            reduce using rule 10
	let            reduce using rule 10
	case           reduce using rule 10


State 12

	Exp -> var .                                        (rule 11)

	'='            reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	num            reduce using rule 11
	var            reduce using rule 11
	let            reduce using rule 11
	case           reduce using rule 11


State 13

	Exp -> let . '(' Declaration ')' '(' Exp ')'        (rule 3)

	'('            shift, and enter state 16


State 14

	Exp -> case . '(' Exp ')' ThenBody                  (rule 4)

	'('            shift, and enter state 15


State 15

	Exp -> case '(' . Exp ')' ThenBody                  (rule 4)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 29

State 16

	Exp -> let '(' . Declaration ')' '(' Exp ')'        (rule 3)

	')'            reduce using rule 13
	'['            reduce using rule 13

	Declaration    goto state 28

State 17

	Exp -> '(' Exp . ')'                                (rule 9)

	')'            shift, and enter state 27


State 18

	Exp -> '*' Exp . Exp                                (rule 7)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 26

State 19

	Exp -> '-' Exp . Exp                                (rule 6)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 25

State 20

	Exp -> '+' Exp . Exp                                (rule 5)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 24

State 21

	Exp -> '=' Exp . Exp                                (rule 8)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 23

State 22

	Seq -> Seq '(' Exp ')' .                            (rule 1)

	'('            reduce using rule 1
	%eof           reduce using rule 1


State 23

	Exp -> '=' Exp Exp .                                (rule 8)

	'='            reduce using rule 8
	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'('            reduce using rule 8
	')'            reduce using rule 8
	num            reduce using rule 8
	var            reduce using rule 8
	let            reduce using rule 8
	case           reduce using rule 8


State 24

	Exp -> '+' Exp Exp .                                (rule 5)

	'='            reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	num            reduce using rule 5
	var            reduce using rule 5
	let            reduce using rule 5
	case           reduce using rule 5


State 25

	Exp -> '-' Exp Exp .                                (rule 6)

	'='            reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	num            reduce using rule 6
	var            reduce using rule 6
	let            reduce using rule 6
	case           reduce using rule 6


State 26

	Exp -> '*' Exp Exp .                                (rule 7)

	'='            reduce using rule 7
	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	num            reduce using rule 7
	var            reduce using rule 7
	let            reduce using rule 7
	case           reduce using rule 7


State 27

	Exp -> '(' Exp ')' .                                (rule 9)

	'='            reduce using rule 9
	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	num            reduce using rule 9
	var            reduce using rule 9
	let            reduce using rule 9
	case           reduce using rule 9


State 28

	Exp -> let '(' Declaration . ')' '(' Exp ')'        (rule 3)
	Declaration -> Declaration . '[' var '(' Exp ')' ']'    (rule 12)

	')'            shift, and enter state 31
	'['            shift, and enter state 32


State 29

	Exp -> case '(' Exp . ')' ThenBody                  (rule 4)

	')'            shift, and enter state 30


State 30

	Exp -> case '(' Exp ')' . ThenBody                  (rule 4)

	'='            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'['            shift, and enter state 36
	num            reduce using rule 16
	var            reduce using rule 16
	let            reduce using rule 16
	case           reduce using rule 16

	ThenBody       goto state 35

State 31

	Exp -> let '(' Declaration ')' . '(' Exp ')'        (rule 3)

	'('            shift, and enter state 34


State 32

	Declaration -> Declaration '[' . var '(' Exp ')' ']'    (rule 12)

	var            shift, and enter state 33


State 33

	Declaration -> Declaration '[' var . '(' Exp ')' ']'    (rule 12)

	'('            shift, and enter state 39


State 34

	Exp -> let '(' Declaration ')' '(' . Exp ')'        (rule 3)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 38

State 35

	Exp -> case '(' Exp ')' ThenBody .                  (rule 4)

	'='            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	num            reduce using rule 4
	var            reduce using rule 4
	let            reduce using rule 4
	case           reduce using rule 4


State 36

	ThenBody -> '[' . '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' . '(' Exp ')' '(' Exp ')' ']' ThenBody    (rule 15)

	'('            shift, and enter state 37


State 37

	ThenBody -> '[' '(' . Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' . Exp ')' '(' Exp ')' ']' ThenBody    (rule 15)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 42

State 38

	Exp -> let '(' Declaration ')' '(' Exp . ')'        (rule 3)

	')'            shift, and enter state 41


State 39

	Declaration -> Declaration '[' var '(' . Exp ')' ']'    (rule 12)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 40

State 40

	Declaration -> Declaration '[' var '(' Exp . ')' ']'    (rule 12)

	')'            shift, and enter state 44


State 41

	Exp -> let '(' Declaration ')' '(' Exp ')' .        (rule 3)

	'='            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	num            reduce using rule 3
	var            reduce using rule 3
	let            reduce using rule 3
	case           reduce using rule 3


State 42

	ThenBody -> '[' '(' Exp . ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp . ')' '(' Exp ')' ']' ThenBody    (rule 15)

	')'            shift, and enter state 43


State 43

	ThenBody -> '[' '(' Exp ')' . '(' Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' . '(' Exp ')' ']' ThenBody    (rule 15)

	'('            shift, and enter state 46


State 44

	Declaration -> Declaration '[' var '(' Exp ')' . ']'    (rule 12)

	']'            shift, and enter state 45


State 45

	Declaration -> Declaration '[' var '(' Exp ')' ']' .    (rule 12)

	')'            reduce using rule 12
	'['            reduce using rule 12


State 46

	ThenBody -> '[' '(' Exp ')' '(' . Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' '(' . Exp ')' ']' ThenBody    (rule 15)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 47

State 47

	ThenBody -> '[' '(' Exp ')' '(' Exp . ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' '(' Exp . ')' ']' ThenBody    (rule 15)

	')'            shift, and enter state 48


State 48

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' . ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' '(' Exp ')' . ']' ThenBody    (rule 15)

	']'            shift, and enter state 49


State 49

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' . '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' . ThenBody    (rule 15)

	'='            reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'['            shift, and enter state 51
	num            reduce using rule 16
	var            reduce using rule 16
	let            reduce using rule 16
	case           reduce using rule 16

	ThenBody       goto state 50

State 50

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' ThenBody .    (rule 15)

	'='            reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	num            reduce using rule 15
	var            reduce using rule 15
	let            reduce using rule 15
	case           reduce using rule 15


State 51

	ThenBody -> '[' . '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' . else '(' Exp ')' ']'    (rule 14)
	ThenBody -> '[' . '(' Exp ')' '(' Exp ')' ']' ThenBody    (rule 15)

	'('            shift, and enter state 37
	else           shift, and enter state 52


State 52

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else . '(' Exp ')' ']'    (rule 14)

	'('            shift, and enter state 53


State 53

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else '(' . Exp ')' ']'    (rule 14)

	'='            shift, and enter state 6
	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	'*'            shift, and enter state 9
	'('            shift, and enter state 10
	num            shift, and enter state 11
	var            shift, and enter state 12
	let            shift, and enter state 13
	case           shift, and enter state 14

	Exp            goto state 54

State 54

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp . ')' ']'    (rule 14)

	')'            shift, and enter state 55


State 55

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' . ']'    (rule 14)

	']'            shift, and enter state 56


State 56

	ThenBody -> '[' '(' Exp ')' '(' Exp ')' ']' '[' else '(' Exp ')' ']' .    (rule 14)

	'='            reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	num            reduce using rule 14
	var            reduce using rule 14
	let            reduce using rule 14
	case           reduce using rule 14


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 13
Number of non-terminals: 5
Number of states: 57
